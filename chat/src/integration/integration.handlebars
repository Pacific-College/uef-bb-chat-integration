<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Chat Integration</title>
    <script type="application/javascript">
      window.localStorage.setItem('firstName', '{{lisPersonNameGiven}}');
      window.localStorage.setItem('lastName', '{{lisPersonNameFamily}}');
      window.localStorage.setItem('email', '{{lisPersonContactEmailPrimary}}');
      // Verify that we're in the integration iframe
      if (!window.parent) {
        throw new Error('Not within iframe');
      }

      const integrationHost = `${window.location.protocol}//${window.location.hostname}:${window.location.port}`;
      const shouldShowPanel = false;

      let messageChannel;
      let panelId;

      // Set up the window.postMessage listener for the integration handshake (for step #2)
      window.addEventListener("message", onPostMessageReceived, false);

      // (1) Send the integration handshake message to Learn Ultra. This notifies Learn Ultra that the integration has
      // loaded and is ready to communicate.
      const lmsHost = '{{lmsHost}}';
      window.parent.postMessage({"type": "integration:hello"}, `${lmsHost}/*`);

      function onPostMessageReceived(evt) {
        console.log("Post Message Received", evt);
        // Do some basic message validation.
        const fromTrustedHost = evt.origin === lmsHost || evt.origin === integrationHost;
        if (!fromTrustedHost || !evt.data || !evt.data.type) {
          return;
        }

        // (2) A majority of the communication between the integration and Learn Ultra will be over a "secure" MessageChannel.
        // As response to the integration handshake, Learn Ultra will send a MessageChannel port to the integration.
        if (evt.data.type === 'integration:hello') {
          // Store the MessageChannel port for future use
          messageChannel = new LoggedMessageChannel(evt.ports[0]);
          messageChannel.onmessage = onMessageFromUltra;

          // (3) Now, we need to authorize with Learn Ultra using the OAuth2 token that the server negotiated for us
          messageChannel.postMessage({
            type: 'authorization:authorize',

            // This token is passed in through integration.ejs
            token: "{{authorizationToken}}",
          });
        }
      }

      function onMessageFromUltra(message) {
        // If our authorization token was valid, Learn Ultra will send us a response, notifying us that the authorization
        // was successful
        if (message.data.type === 'authorization:authorize') {
          onAuthorizedWithUltra();
        }

        // On click, route, and hover messages, we will receive an event:event event
        if (message.data.type === 'event:event' && message.data.eventType === 'help:request') {
          // From here, you can do something with those events...
          const chatRouteUrl = '{{chatRouteUrl}}';
          /* window.open(chatRouteUrl); */
          messageChannel.postMessage({
            type: 'portal:panel',
            correlationId: 'panel-1',
            panelType: 'small',
            panelTitle: 'PCHS BB Support',
            attributes: {
              onClose: {
                callbackId: 'panel-1-close',
              },
            },
          });
          messageChannel.postMessage({
            "type": "help:request:response",
            "correlationId": message.data.correlationId
          });
        }

        // Once Ultra has opened the panel, it will notify us that we can render into the panel
        if (message.data.type === 'portal:panel:response') {
          renderPanelContents(message);
        }
      }

      function onAuthorizedWithUltra() {
        console.log('Authorization was successful');

        // Once we are authorized, we can subscribe to events, such as telemetry events
        messageChannel.postMessage({
          type: 'event:subscribe',
          subscriptions: ['click', 'route'],
        });

        // We can also register a help provider, such as a primary help provider that will overwrite the existing provider
        messageChannel.postMessage({
          type: 'help:register',
          id: 'college-help-provider',
          displayName: '{{chatDisplayName}}',
          iconUrl: '{{chatIconUrl}}',
          providerType: 'primary'
        });
      }

      function renderPanelContents(message) {
        // Notify Ultra to render our contents into the panel
        const stage = '{{stage}}';
        if (message.data.correlationId === 'panel-1') {
          panelId = message.data.portalId;
          messageChannel.postMessage({
            type: 'portal:render',
            portalId: message.data.portalId,
            contents: {
              tag: 'span',
              props: {
                style: {
                  display: 'flex',
                  height: '100%',
                  width: '100%',
                  flexDirection: 'column',
                  alignItems: 'stretch',
                  justifyContent: 'stretch',
                },
              },
              children: [{
                tag: 'iframe',
                props: {
                  style: {flex: '1 1 auto'},
                  src: `${integrationHost}/${stage}/iframe-panel`,
                },
              }]
            },
          });
        }
      }

      // Sets up a way to communicate between the iframe and the integration script
      window.addEventListener('storage', onEventFromIframe);
      function onEventFromIframe(evt) {
        if (evt.key !== 'event') {
          return;
        }

        const message = JSON.parse(evt.newValue);
        switch (message.type) {
          // Handles when the user clicks the "close panel" button
          case 'demo:closePanel':
            messageChannel.postMessage({
              type: 'portal:panel:close',
              id: panelId,
            });
            break;
        }
      }

      /**
      * A MessageChannel-compatible API, but with console logging.
      */
      class LoggedMessageChannel {
        onmessage = () => { /* */
        };

        constructor(messageChannel) {
          this.messageChannel = messageChannel;
          this.messageChannel.onmessage = this.onMessage;
        }

        onMessage = (evt) => {
          console.log(`[UEF] From Learn Ultra:`, evt.data);
          this.onmessage(evt);
        };

        postMessage = (message) => {
          console.log(`[UEF] To Learn Ultra`, message);
          this.messageChannel.postMessage(message);
        }
      }

    </script>
    {{!-- <script type="application/javascript" src="https://ultra-extensions-js.s3.us-east-2.amazonaws.com/integration.js"></script> --}}
</head>
<body>
    Integration has loaded. This content will not be visible to the end-user
</body>
</html>