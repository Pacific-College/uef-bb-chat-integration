app: blackboard-integrations
org: pacificcollege
service: ultra-extensions

plugins:
  - serverless-esbuild
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-dynamodb-local
  - serverless-offline

package:
  individually: true
  excludeDevDependencies: true
  exclude:
    - .webpack/**
    - .serverless/**
    - node_modules/**
  include:
    - src/integration/**
    

provider:
  name: aws
  runtime: nodejs16.x
  lambdaHashingVersion: '20201221'
  memorySize: 512
  profile: pchs-serverless
  deploymentMethod: direct

  stage: ${opt:stage, 'production'}
  region: ${opt:region, 'us-east-2'}

  environment:
    APP_KEY: ${param:app-key-${self:provider.stage}}
    APP_SECRET: ${param:app-secret-${self:provider.stage}}
    APP_URL: ${param:app-url-${self:provider.stage}}
    APP_STAGE: ${self:provider.stage}
    CHAT_ICON_URL: ${param:chat-icon-url}
    CHAT_STUDENT_URL: ${param:chat-student-url}
    CHAT_STAFF_URL: ${param:chat-staff-url}
    CHAT_DISPLAY_NAME: ${param:chat-display-name}
    FC_TOKEN: ${param:fc-token}
    UEF_SCHEMA: UefTable-${self:provider.stage}
  
  logs:
    # Enable API Gateway logs
    restApi: true

iamRoleStatements:
  - Effect: Allow
    Action:
      - xray:PutTelemetryRecords
      - xray:PutTraceSegments
    Resource: !GetAtt PreBsnQueueTable.Arn
  - Effect: Allow
    Action:
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.UEF_USER_SCHEMA}

functions:
  ltiLaunch:
    handler: src/ltiLaunch.handler
    events:
      - http:
          path: lti-launch
          method: post
          cors: true

  authorizationComplete:
    handler: src/authComplete.handler
    events:
      - http:
          path: authorization-complete
          method: get
          cors: true

  iframePanel:
    handler: src/iframePanel.handler
    events:
      - http:
          path: iframe-panel
          method: get
          cors: true

resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: hashId
            AttributeType: S
          - AttributeName: role
            AttributeType: S
        KeySchema:
          - AttributeName: hashId
            KeyType: HASH
          - AttributeName: role
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.UEF_SCHEMA}

